/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/outputs.h>

&sk { release-after-ms = <2000>; };

/ {
    combos {
        compatible = "zmk,combos";

        num1 {
            bindings = <&kp N1>;
            key-positions = <1 13>;
            layers = <0 8 9>;
        };

        num2 {
            bindings = <&kp N2>;
            key-positions = <2 14>;
            layers = <0 8 9>;
        };

        num3 {
            bindings = <&kp N3>;
            key-positions = <3 15>;
            layers = <0 8 9>;
        };

        num4 {
            bindings = <&kp N4>;
            key-positions = <4 16>;
            layers = <0 8 9>;
        };

        num5 {
            bindings = <&kp N5>;
            key-positions = <5 17>;
            layers = <0 8 9>;
        };

        num6 {
            bindings = <&kp N6>;
            key-positions = <6 18>;
            layers = <0 8 9>;
        };

        num7 {
            bindings = <&kp N7>;
            key-positions = <7 19>;
            layers = <0 8 9>;
        };

        num8 {
            bindings = <&kp N8>;
            key-positions = <8 20>;
            layers = <0 8 9>;
        };

        num9 {
            bindings = <&kp N9>;
            key-positions = <9 21>;
            layers = <0 8 9>;
        };

        num0 {
            bindings = <&kp N0>;
            key-positions = <10 22>;
            layers = <0 8 9>;
        };

        to_home {
            bindings = <&to 0>;
            key-positions = <0 1>;
            require-prior-idle-ms = <250>;
        };

        equal {
            bindings = <&kp EQUAL>;
            key-positions = <11 23>;
            layers = <0 8 9>;
        };

        l_bracket {
            bindings = <&kp LEFT_BRACKET>;
            key-positions = <20 32>;
            layers = <0 8 9>;
        };

        r_bracket {
            bindings = <&kp RIGHT_BRACKET>;
            key-positions = <21 33>;
            layers = <0 8 9>;
        };

        l_bracket2 {
            bindings = <&kp LEFT_BRACKET>;
            key-positions = <2 3>;
            layers = <4 5>;
        };

        r_bracket2 {
            bindings = <&kp RIGHT_BRACKET>;
            key-positions = <3 4>;
            layers = <4 5>;
        };

        l_paren {
            bindings = <&kp LEFT_PARENTHESIS>;
            key-positions = <14 15>;
            layers = <4 5>;
        };

        r_paren {
            bindings = <&kp RIGHT_PARENTHESIS>;
            key-positions = <15 16>;
            layers = <4 5>;
        };

        l_brace {
            bindings = <&kp LEFT_BRACE>;
            key-positions = <26 27>;
            layers = <4 5>;
        };

        r_brace {
            bindings = <&kp RIGHT_BRACE>;
            key-positions = <27 28>;
            layers = <4 5>;
        };
    };

    behaviors {
        td_reset: tapdance_to_reset {
            compatible = "zmk,behavior-tap-dance";
            label = "TD_RESET";
            #binding-cells = <0>;
            bindings = <&none>, <&td_reset>;
        };

        td_boot: tapdance_to_bootloader {
            compatible = "zmk,behavior-tap-dance";
            label = "TD_BOOT";
            #binding-cells = <0>;
            bindings = <&none>, <&td_boot>;
        };

        as_ht: autoshift_hold_tap {
            compatible = "zmk,behavior-hold-tap";
            label = "AUTOSHIFT_HOLD_TAP";
            bindings = <&shift>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <190>;
        };

        hml: homerow_mods_left {
            compatible = "zmk,behavior-hold-tap";
            label = "HOMEROW_MODS_LEFT_HAND";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            hold-trigger-key-positions = <6 7 8 9 10 11 18 19 20 21 22 23 30 31 32 33 34 35 39 40 41>;
            flavor = "balanced";
            hold-trigger-on-release;
            quick-tap-ms = <200>;
            require-prior-idle-ms = <125>;
        };

        hmr: homerow_mods_right {
            compatible = "zmk,behavior-hold-tap";
            label = "HOMEROW_MODS_RIGHT_HAND";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            hold-trigger-key-positions = <0 1 2 3 4 5 12 13 14 15 16 17 24 25 26 27 28 29 36 37 38>;
            hold-trigger-on-release;
            flavor = "balanced";
            quick-tap-ms = <200>;
            require-prior-idle-ms = <125>;
        };

        cw_caps: capsword_caps {
            compatible = "zmk,behavior-mod-morph";
            label = "SHIFT_FOR_CAPSLOCK";
            bindings = <&caps_word>, <&kp CAPS>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        output_tog: output_toggle {
            compatible = "zmk,behavior-mod-morph";
            label = "OUTPUT-TOGGLE_OUTPUT-USB";
            bindings = <&out OUT_TOG>, <&out OUT_USB>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        lt_c: layer-tap_custom {
            compatible = "zmk,behavior-hold-tap";
            label = "CUSTOM_LAYER-TAP";
            bindings = <&mo>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            flavor = "tap-preferred";
        };

        td_to_base: tap_dance_to_base {
            compatible = "zmk,behavior-tap-dance";
            label = "TD_TO_BASE";
            #binding-cells = <0>;
            bindings = <&none>, <&to 0>;
        };

        td_to_extra: tapdance_to_extra {
            compatible = "zmk,behavior-tap-dance";
            label = "TD_TO_EXTRA";
            #binding-cells = <0>;
            bindings = <&none>, <&to 8>;
        };

        td_to_tap: tapdance_to_tap {
            compatible = "zmk,behavior-tap-dance";
            label = "TD_TO_TAP";
            #binding-cells = <0>;
            bindings = <&none>, <&to 9>;
        };

        td_to_button: td_to_button {
            compatible = "zmk,behavior-tap-dance";
            label = "TD_TO_BUTTON";
            #binding-cells = <0>;
            bindings = <&none>, <&to 7>;
        };

        td_to_nav: td_to_nav {
            compatible = "zmk,behavior-tap-dance";
            label = "TD_TO_NAV";
            #binding-cells = <0>;
            bindings = <&none>, <&to 1>;
        };

        td_to_sym2: td_to_sym2 {
            compatible = "zmk,behavior-tap-dance";
            label = "TD_TO_SYM2";
            #binding-cells = <0>;
            bindings = <&none>, <&to 2>;
        };

        td_to_media: td_to_media {
            compatible = "zmk,behavior-tap-dance";
            label = "TD_TO_MEDIA";
            #binding-cells = <0>;
            bindings = <&none>, <&to 3>;
        };

        td_to_num: td_to_num {
            compatible = "zmk,behavior-tap-dance";
            label = "TD_TO_NUM";
            #binding-cells = <0>;
            bindings = <&none>, <&to 4>;
        };

        td_to_sym: td_to_sym {
            compatible = "zmk,behavior-tap-dance";
            label = "TD_TO_SYM";
            #binding-cells = <0>;
            bindings = <&none>, <&to 5>;
        };

        td_to_func: td_to_func {
            compatible = "zmk,behavior-tap-dance";
            label = "TD_TO_FUNC";
            #binding-cells = <0>;
            bindings = <&none>, <&to 6>;
        };

        skShift_Hyper: skShift_Hyper {
            compatible = "zmk,behavior-mod-morph";
            label = "STICKYSHIFT_STICKYHYPER";
            bindings = <&sk LEFT_SHIFT>, <&sk LA(LS(LG(LCTRL)))>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };
    };

    macros {
        shift: with_lshift {
            compatible = "zmk,behavior-macro-one-param";
            #binding-cells = <1>;
            bindings =
                <&macro_press>,
                <&kp LEFT_SHIFT>,
                <&macro_tap>,
                <&macro_param_1to1 &kp MACRO_PLACEHOLDER>,
                <&macro_release>,
                <&kp LEFT_SHIFT>;

            label = "SHIFTKEY_PRESS_WITH_LEFT_SHIFT_MODIFIER";
        };

        as: autoshift {
            compatible = "zmk,behavior-macro-one-param";
            #binding-cells = <1>;
            bindings =
                <&macro_press>,
                <&macro_param_1to1 &macro_param_1to2 &as_ht MACRO_PLACEHOLDER MACRO_PLACEHOLDER>,
                <&macro_pause_for_release>,
                <&macro_release>,
                <&macro_param_1to1 &macro_param_1to2 &as_ht MACRO_PLACEHOLDER MACRO_PLACEHOLDER>;

            label = "AUTOSHIFT_KEYPRESS";
        };
    };

    keymap {
        compatible = "zmk,keymap";

        base {
            // -----------------------------------------------------------------------------------------
            // |   `   |  Q  |  W  |  F  |  P  |  B  |   |  J  |  L   |  U  |  Y  |  ;  |  -   |
            // |cw_caps|  A  |  R  |  S  |  T  |  G  |   |  M  |  N   |  E  |  I  |  O  |  '   |
            // | skSHFT|  Z  |  X  |  C  |  D  |  V  |   |  K  |  H   |  ,  |  .  |  /  |  \   |
            //                    | ESC | SPC | TAB |   | ENT | BKSP | DEL |

            bindings = <
&kp GRAVE       &kp Q        &kp W        &kp F         &kp P         &kp B        &kp J        &kp L         &kp U         &kp Y        &kp SEMI       &kp MINUS
&cw_caps        &hml LGUI A  &hml LALT R  &hml LCTRL S  &hml LSHFT T  &kp G        &kp M        &hmr RSHFT N  &hmr RCTRL E  &hmr LALT I  &hmr LGUI O    &kp SQT
&sk LEFT_SHIFT  &lt_c 7 Z    &kp X        &kp C         &kp D         &kp V        &kp K        &kp H         &kp COMMA     &kp DOT      &lt_c 7 SLASH  &kp BACKSLASH
                                          &lt 3 ESCAPE  &lt 1 SPACE   &lt 2 TAB    &lt 5 ENTER  &lt 4 BSPC    &lt 6 DELETE
            >;
        };

        nav {
            bindings = <
&td_boot  &td_reset  &td_to_tap  &td_to_extra  &td_to_base  &none    &kp LC(LS(Z))  &kp LC(V)  &kp LC(C)      &kp LC(X)    &kp LC(Z)  &none
&none     &kp LGUI   &kp LALT    &kp LCTRL     &kp LSHFT    &none    &none          &kp LEFT   &kp DOWN       &kp UP       &kp RIGHT  &none
&none     &none      &kp RALT    &td_to_num    &td_to_nav   &none    &kp INSERT     &kp HOME   &kp PAGE_DOWN  &kp PAGE_UP  &kp END    &none
                                 &none         &none        &none    &kp ENTER      &kp BSPC   &kp DELETE
            >;
        };

        sym2 {
            bindings = <
&none  &kp PERCENT      &kp LESS_THAN  &kp GREATER_THAN  &kp DOUBLE_QUOTES  &kp PERIOD     &kp AMPERSAND  &kp QUESTION  &kp LEFT_PARENTHESIS  &kp RIGHT_PARENTHESIS  &kp SEMI          &none
&none  &kp EXCLAMATION  &kp KP_MINUS   &kp KP_PLUS       &kp EQUAL          &kp POUND      &kp PIPE       &kp COLON     &kp LEFT_BRACKET      &kp RIGHT_BRACKET      &kp SINGLE_QUOTE  &none
&none  &kp CARET        &kp KP_SLASH   &kp KP_MULTIPLY   &kp BACKSLASH      &kp AT_SIGN    &kp TILDE      &kp DOLLAR    &kp LEFT_BRACE        &kp RIGHT_BRACE        &kp SLASH         &none
                                       &none             &none              &none          &kp ENTER      &kp BSPC      &kp DELETE
            >;
        };

        media {
            bindings = <
&td_boot  &td_reset  &td_to_tap  &td_to_extra  &td_to_base   &none    &none        &none             &none              &none            &none         &none
&none     &kp LGUI   &kp LALT    &kp LCTRL     &kp LSHFT     &none    &output_tog  &kp C_PREV        &kp C_VOLUME_DOWN  &kp C_VOLUME_UP  &kp C_NEXT    &none
&none     &none      &none       &td_to_func   &td_to_media  &none    &bt BT_CLR   &bt BT_SEL 0      &bt BT_SEL 1       &bt BT_SEL 2     &bt BT_SEL 3  &bt BT_SEL 4
                                 &none         &none         &none    &kp C_STOP   &kp C_PLAY_PAUSE  &kp C_MUTE
            >;
        };

        num {
            bindings = <
&kp GRAVE  &kp LBKT   &kp N7  &kp N8      &kp N9  &kp RBKT         &none  &td_to_base  &td_to_extra  &td_to_tap  &td_reset  &td_boot
&kp SQT    &kp SEMI   &kp N4  &kp N5      &kp N6  &kp EQUAL        &none  &kp LSHFT    &kp LCTRL     &kp LALT    &kp LGUI   &none
&none      &kp COMMA  &kp N1  &kp N2      &kp N3  &kp BACKSLASH    &none  &td_to_num   &td_to_nav    &kp RALT    &none      &none
                              &kp PERIOD  &kp N0  &kp MINUS        &none  &none        &none
            >;
        };

        sym {
            bindings = <
&kp TILDE          &kp LEFT_BRACE  &kp AMPERSAND    &kp ASTERISK      &kp LPAR               &kp RIGHT_BRACE    &none  &td_to_base  &td_to_extra  &td_to_tap  &td_reset  &td_boot
&kp DOUBLE_QUOTES  &kp COLON       &kp DOLLAR       &kp PERCENT       &kp CARET              &kp PLUS           &none  &kp RSHIFT   &kp RCTRL     &kp LALT    &kp LGUI   &none
&none              &kp LESS_THAN   &kp EXCLAMATION  &kp AT_SIGN       &kp POUND              &kp PIPE           &none  &td_to_sym   &td_to_sym2   &kp RALT    &none      &none
                                                    &kp GREATER_THAN  &kp RIGHT_PARENTHESIS  &kp UNDERSCORE     &none  &none        &none
            >;
        };

        func {
            bindings = <
&none  &kp F12  &kp F7  &kp F8     &kp F9     &kp PSCRN          &none  &td_to_base  &td_to_extra  &td_to_tap  &trans    &trans
&none  &kp F11  &kp F4  &kp F5     &kp F6     &kp SLCK           &none  &kp LSHIFT   &kp LCTRL     &kp LALT    &kp LGUI  &none
&none  &kp F10  &kp F1  &kp F2     &kp F3     &kp PAUSE_BREAK    &none  &td_to_func  &td_to_media  &kp RALT    &none     &none
                        &kp K_APP  &kp SPACE  &kp TAB            &none  &none        &none
            >;
        };

        button {
            bindings = <
&none  &kp LC(Z)  &kp LC(X)  &kp LC(C)  &kp LC(V)  &kp LC(LS(Z))    &kp LC(LS(Z))  &kp LC(V)  &kp LC(C)  &kp LC(X)  &kp LC(Z)  &none
&none  &kp LGUI   &kp LALT   &kp LCTRL  &kp LSHFT  &none            &none          &kp LSHFT  &kp LCTRL  &kp LALT   &kp LGUI   &none
&none  &kp LC(Z)  &kp LC(X)  &kp LC(C)  &kp LC(V)  &kp LC(LS(Z))    &kp LC(LS(Z))  &kp LC(V)  &kp LC(C)  &kp LC(X)  &kp LC(Z)  &none
                             &none      &none      &none            &none          &none      &none
            >;
        };

        extra {
            bindings = <
&kp GRAVE       &kp Q        &kp W        &kp E         &kp R          &kp T          &kp Y          &kp U         &kp I           &kp O        &kp P                &kp MINUS
&cw_caps        &hml LGUI A  &hml LALT S  &hml LCTRL D  &hml LSHIFT F  &kp G          &kp H          &hmr LSHFT J  &hmr LCTRL K    &hmr LALT L  &hmr LGUI SEMICOLON  &kp SQT
&skShift_Hyper  &lt_c 7 Z    &kp X        &kp C         &kp V          &kp B          &kp N          &kp M         &kp COMMA       &kp PERIOD   &lt_c 7 SLASH        &kp BACKSLASH
                                          &lt_c 3 ESC   &lt_c 1 SPACE  &lt_c 2 TAB    &lt_c 5 ENTER  &lt_c 4 BSPC  &lt_c 6 DELETE
            >;

            label = "qwerty_layout";
        };

        tap {
            bindings = <
&kp GRAVE       &kp Q  &kp W  &kp F    &kp P      &kp B      &kp J      &kp L     &kp U       &kp Y    &kp SEMI  &kp MINUS
&cw_caps        &kp A  &kp R  &kp S    &kp T      &kp G      &kp M      &kp N     &kp E       &kp I    &kp O     &kp SQT
&skShift_Hyper  &kp Z  &kp X  &kp C    &kp D      &kp V      &kp K      &kp H     &kp COMMA   &kp DOT  &kp FSLH  &kp BACKSLASH
                              &kp ESC  &kp SPACE  &kp TAB    &kp ENTER  &kp BSPC  &kp DELETE
            >;
        };
    };
};
